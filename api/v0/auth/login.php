<?php
/**
 * Created by PhpStorm.
 * User: delmwinbaeka
 * Date: 4/6/19
 * Time: 12:37 PM
 */

/**
 * @api {post} /auth/login Login
 * @apiVersion 0.0.1
 * @apiName LoginEmail
 * @apiGroup Auth
 * @apiPermission none
 *
 * @apiDescription Handles login via email address and password or via social account and returns an encrypted jwt to the client. The jwt
 * contains the client apid used to request additional information anytime an api request outside the Auth group is made
 * to the server
 *
 * @apiParam (Email) {String="email"} type
 * @apiParam (Email) {String} email User's email address
 * @apiParam (Email) {String} password User's password
 * @apiParam (Email) {String} firebaseToken Firebase token generated by client
 *
 * @apiParam (Social) {String="social"} type
 * @apiParam (Social) {String} id Social Media ID. e.g Facebook ID provided after authentication
 * @apiParam (Social) {String="facebook", "twitter", "linkedin"} socialType Social Media Type
 * @apiParam (Social) {String} firebaseToken Firebase token generated by client
 *
 * @apiParamExample {json} Request-Example (Email):
 *  {
 *      "type": "email",
 *      "email": "kofirook@myrookery.com",
 *      "password": "password",
 *      "firebaseToken": "firebaseTokenHere"
 *  }
 *
 * @apiParamExample {json} Request-Example (Social):
 *  {
 *      "type": "social",
 *      "id": "Social Media ID here",
 *      "socialType": "facebook",
 *      "firebaseToken": "firebaseTokenHere"
 *  }
 *
 * @apiSuccess {Boolean} success=true Shows if request was successful or not
 * @apiSuccess {String} errorMessage Contains the error message generated
 * @apiSuccess {String} errorCode Programmable defined error messages
 * @apiSuccess {Object[]} result List of Request Output for User
 * @apiSuccess {String} result.jwt The JSON Web Token for the user
 * @apiSuccess {Object[]} result.user Contains list of user information
 * @apiSuccess {String} result.user.email Email address of user
 * @apiSuccess {String} result.user.firebaseToken Firebase Token returned to user
 *
 * @apiSuccessExample {json} Success-Response:
 *  HTTP/1.1 200 OK
 * {
 *      "success": true,
 *      "errorMessage": null,
 *      "errorCode": null,
 *      "result": {
 *                  "jwt": "generated JWT",
 *                  "user": {
 *                              "email": "kofirook@myrookery.com",
 *                              "firebaseToken": "firebaseTokenHere"
 *                          }
 *                 }
 *  }
 *
 * @apiError {String} USER_AUTHENTICATION_ERROR Invalid login details or user does not exist
 * @apiError {String} INVALID_REQUEST Wrong request made to API endpoint
 * @apiError {String} MISSING_PARAMETERS Missing one or two parameters in request
 *
 * @apiErrorExample Error-Response (Example):
 *     HTTP/1.1 401 Not Authenticated
 *     {
 *       "success": false,
 *       "errorMessage": "Missing some parameters in request",
 *       "errorCode": "MISSING_PARAMETERS",
 *       "result": null
 *     }
 */
header("Access-Control-Allow-Origin: http://localhost:8080/api/");
header("Content-Type: application/json; charset=UTF-8");
header("Access-Control-Allow-Methods: POST");
header("Access-Control-Max-Age: 3600");
header("Access-Control-Allow-Headers: Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With");

include_once '../config/database.php';
include_once '../objects/student.php';
include_once '../config/core.php';
include_once '../libs/php-jwt/BeforeValidException.php';
include_once '../libs/php-jwt/ExpiredException.php';
include_once '../libs/php-jwt/SignatureInvalidException.php';
include_once '../libs/php-jwt/JWT.php';
use  \Firebase\JWT\JWT;

$database = new Database();
$db = $database->getConnection();

$student = new Student($db);

$data = json_decode(file_get_contents("php://input"));

if(isset($data->type, $data->firebaseToken)){
    if($data->type == "email" && isset($data->email, $data->password)) {
        $student->email = $data->email;
        $student->password = $data->password;
        $student->firebaseToken = $data->firebaseToken;

        $student_exists = $student->emailExists();

        if($student_exists && password_verify($data->password, $student->password)){
            $token = $student->generateJWT();
            $jwt = JWT::encode($token, base64_decode($jwtkey));
            http_response_code(200);
            echo json_encode(
                array(
                    "success" => true,
                    "errorMessage" => null,
                    "errorCode" => null,
                    "result" => array(
                        "jwt" => $jwt,
                        "user" => array(
                            "email" => $student->email,
                            "firebaseToken" => $student->firebaseToken
                        )
                    )
                )
            );
        } else {
            http_response_code(401);
            echo json_encode(
                array(
                    "success" => false,
                    "errorMessage" => "Invalid login details or user does not exist",
                    "errorCode" => "USER_AUTHENTICATION_ERROR",
                    "result" => null
                )
            );
        }
    } elseif ($data->type == "social" && isset($data->id, $data->socialType)){
        $student->socialID = $data->id;
        $student->firebaseToken = $data->firebaseToken;
        $student_exists = $student->socialExists($data->socialType);

        if($student_exists){
            $token = $student->generateJWT();
            $jwt = JWT::encode($token, base64_decode($jwtkey));
            http_response_code(200);
            echo json_encode(
                array(
                    "success" => true,
                    "errorMessage" => null,
                    "errorCode" => null,
                    "result" => array(
                        "jwt" => $jwt,
                        "user" => array(
                            "email" => $student->email,
                            "firebaseToken" => $student->firebaseToken
                        )
                    )
                )
            );
        } else {
            http_response_code(401);
            echo json_encode(
                array(
                    "success" => false,
                    "errorMessage" => "Invalid login details or user does not exist",
                    "errorCode" => "USER_AUTHENTICATION_ERROR",
                    "result" => null
                )
            );
        }
    } else {
        http_response_code(401);
        echo json_encode(
            array(
                "success" => false,
                "errorMessage" => "Wrong request made to API endpoint",
                "errorCode" => "INVALID_REQUEST",
                "result" => null
            )
        );
    }
} else {
    http_response_code(400);
    echo json_encode(
        array(
            "success" => false,
            "errorMessage" => "Missing one or two parameters in request",
            "errorCode" => "MISSING_PARAMETERS",
            "result" => null
        )
    );
}
?>