<?php
/**
 * User: delmwinbaeka
 * Date: 4/2/19
 * Time: 9:20 PM
 */


/**
 * @api {post} /auth/register Register(Email)
 * @apiVersion 0.0.1
 * @apiName RegisterEmail
 * @apiGroup Auth
 * @apiPermission none
 *
 * @apiDescription Handles registration via email address and password and requires usual sign up process and returns an
 * encrypted jwt to the client. The jwt contains the client apid used to request additional information anytime an api
 * request outside the Auth group is made to the server
 *
 * @apiParam (Email) {String} email User's email address
 * @apiParam (Email) {String} password User's password
 * @apiParam (Email) {String} firebaseToken Firebase token generated by client
 * @apiParam (Email) {String} firstname User's firstname
 * @apiParam (Email) {String} lastname User's lastname
 * @apiParam (Email) {String="m", "f"} gender User's gender
 * @apiParam (Email) {String} dateOfBirth User's date of birth. Format: dd MM yyyy eg. 20 February 1997
 * @apiParam (Email) {String} phone User's phone number. Format: 233NNNNNNNNN eg. 233501234567
 *
 * @apiParamExample {json} Request-Example (Email):
 *  {
 *      "email": "kofirook@myrookery.com",
 *      "password": "password",
 *      "firebaseToken": "firebaseTokenHere",
 *      "firstname": "Kofi",
 *      "lastname": "Rook",
 *      "gender": "m",
 *      "dateOfBirth": "20 Februaru 1997",
 *      "phone": "233501234567"
 *  }
 *
 * @apiSuccess {Boolean} success=true Shows if request was successful or not
 * @apiSuccess {String} errorMessage Contains the error message generated
 * @apiSuccess {String} errorCode Programmable defined error messages
 * @apiSuccess {Object[]} result List of Request Output for User
 * @apiSuccess {String} result.jwt The JSON Web Token for the user
 * @apiSuccess {Object[]} result.user Contains list of user information
 * @apiSuccess {String} result.user.email Email address of user
 * @apiSuccess {String} result.user.firebaseToken Firebase Token returned to user
 * @apiSuccess {String} result.user.firstname First name of user
 * @apiSuccess {String} result.user.lastname Last name of user
 *
 * @apiSuccessExample {json} Success-Response:
 *  HTTP/1.1 200 OK
 * {
 *      "success": true,
 *      "errorMessage": null,
 *      "errorCode": null,
 *      "result": {
 *                  "jwt": "generated JWT",
 *                  "user": {
 *                              "email": "kofirook@myrookery.com",
 *                              "firstname": "Kofi",
 *                              "lastname": "Rook",
 *                              "firebaseToken": "firebaseTokenHere"
 *                          }
 *                 }
 *  }
 *
 * @apiError {String} USER_CREATION_ERROR User exists or could not be created
 * @apiError {String} MISSING_PARAMETERS Missing one or two parameters in request
 *
 * @apiErrorExample Error-Response (Example):
 *     HTTP/1.1 401 Not Authenticated
 *     {
 *       "success": false,
 *       "errorMessage": "Missing some parameters in request",
 *       "errorCode": "MISSING_PARAMETERS",
 *       "result": null
 *     }
 */

header("Access-Control-Allow-Origin: https://rookweb.herokuapp.com/api/");
header("Content-Type: application/json; charset=UTF-8");
header("Access-Control-Allow-Methods: POST");
header("Access-Control-Max-Age: 3600");
header("Access-Control-Allow-Headers: Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With");

include_once '../config/database.php';
include_once '../objects/student.php';
include_once '../config/core.php';
include_once '../libs/php-jwt/BeforeValidException.php';
include_once '../libs/php-jwt/ExpiredException.php';
include_once '../libs/php-jwt/SignatureInvalidException.php';
include_once '../libs/php-jwt/JWT.php';
use  \Firebase\JWT\JWT;

$database = new Database();
$db = $database->getConnection();

$student = new Student($db);

$data = json_decode(file_get_contents("php://input"));

if(isset($data->firstname, $data->lastname, $data->firebaseToken, $data->email, $data->gender, $data->dateOfBirth, $data->password, $data->phone)){
    $student->firstname = $data->firstname;
    $student->lastname = $data->lastname;
    $student->email = $data->email;
    $student->gender = $data->gender;
    $student->dateOfBirth = $data->dateOfBirth;
    $student->password = $data->password;
    $student->phone = $data->phone;
    $student->firebaseToken = $data->firebaseToken;

    if($student->createAccount()){
        $token = $student->generateJWT();
        $jwt = JWT::encode($token, base64_decode($jwtkey));
        http_response_code(200);
        echo json_encode(
            array(
                "success" => true,
                "errorMessage" => null,
                "errorCode" => null,
                "result" => array(
                    "jwt" => $jwt,
                    "user" => array(
                        "email" => $student->email,
                        "firstname" => $student->firstname,
                        "lastname" => $student->lastname,
                        "firebaseToken" => $student->firebaseToken
                    )
                )
            )
        );
    } else {
        http_response_code(400);
        echo json_encode(
            array(
                "success" => false,
                "errorMessage" => "Could not create user",
                "errorCode" => "USER_CREATION_ERROR",
                "result" => null
            )
        );
    }
} else {
    http_response_code(400);
    echo json_encode(
        array(
            "success" => false,
            "errorMessage" => "Missing one or two parameters in request",
            "errorCode" => "MISSING_PARAMETERS",
            "result" => null
        )
    );
}

?>